//Example3
//通常，在函数体内定义了一个变量，每当程序运行到该语句时都会给该局部变量分配栈内存。但随着程序退出函数体，系统就会收回栈内存，局部变量也相应失效。
//但有时候我们需要在两次调用之间对变量的值进行保存。通常的想法是定义一个全局变量来实现。但这样一来，变量已经不再属于函数本身了，不再仅受函数的控制，给程序的维护带来不便。
//静态局部变量正好可以解决这个问题。静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次调用，直到下次赋新值。


#include<iostream.h>
#include<stdio.h>
void fn();
void main()
{
    fn();
    fn();
    fn();
}
void fn()
{
    static int n=10;//静态局部变量在程序执行到该对象的声明处时被     首次初始化     ，即以后的函数调用不再进行初始化；如果没有显式初始化，会被程序自动初始化为0；
    printf("%d",n);//它始终驻留在全局数据区，直到程序运行结束。但  其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束；
    n++;
}
